#!/usr/bin/env python
from __future__ import (absolute_import, division, print_function,
                        unicode_literals)

import sys
from os.path import dirname, exists, join, realpath

import click

from jerjerrod.caching import DiskCache
from jerjerrod.projects import get_all_projects


@click.group()
def cli():
    pass


# TODO: which commands need to be fast?
# WS name PATH
# WS names
# WS status NAME
# WS changed NAME
# WS untracked NAME
# WS stashes NAME
# WS outgoing NAME

# TODO: make the following invocations work:
# WS summary
# WS names
# WS name PATH
# WS status NAME
# WS changed NAME
# WS untracked NAME
# WS stashes NAME
# WS outgoing NAME


@cli.command()
@click.argument('STATUS')
def namesbystatus(status):
    """
    Names returned will be one of the following:
    - names of workspaces that match the given STATUS
    - names of other repos that match the given STATUS
    """
    # use the disk cache
    for proj in get_all_projects(DiskCache(), {}):
        if proj.getstatus(True) == status:
            print(proj.getname())


@cli.command()
@click.argument('NAME_OR_PATH')
def summary(name_or_path):
    # use the disk cache
    cache = DiskCache()

    def _summarise(repo, indent):
        info = repo._getinfo(True)
        sys.stdout.write(' ' * indent)
        sys.stdout.write('  Outgoing: %s\n' % info['outgoing'])
        sys.stdout.write(' ' * indent)
        sys.stdout.write('  Changed/Untracked: %d/%d\n'
                         % (len(info['changed']), len(info['untracked'])))
        if info['stashes']:
            sys.stdout.write(' ' * indent)
            sys.stdout.write('  Stashes: %d\n' % info['stashes'])

    project = None
    for proj in get_all_projects(cache, {}):
        if proj.getname() == name_or_path:
            project = proj
            break
        if proj.containspath(name_or_path):
            project = proj
            break

    if not project:
        raise Exception("No project {}".format(name_or_path))

    sys.stdout.write("%s %s\n" % (project.getname(), project._path))
    if hasattr(project, '_repos'):
        # TODO: summarise workspace
        indent = 8
        for repo in project._repos:
            sys.stdout.write(' ' * indent)
            sys.stdout.write("%s %s\n" % (repo._name, repo._path))
            _summarise(repo, indent)
        garbage = project.getgarbage()
        if len(garbage):
            sys.stdout.write(' ' * indent)
            sys.stdout.write("GARBAGE: %s\n" % (garbage, ))
    else:
        sys.stdout.write(project.getname())
        _summarise(project, 0)


@cli.command()
@click.argument('PATH', nargs=-1, type=click.Path(exists=True))
@click.option('--local',
              is_flag=True,
              help="Don't touch the expensive 'hg outgoing' cache")
def clearcache(path, local):
    """clear all caches associated with PATH"""
    cache = DiskCache()

    def _checkandclear(path):
        if exists(join(path, '.git')) or exists(join(path, '.hg')):
            cache.clearcache(path)
            if not local:
                cache.clearcache(path + '...outgoing')

    for trypath in map(realpath, path):
        while len(trypath) > 2:
            _checkandclear(trypath)
            # shorten the path and try again
            trypath = dirname(trypath)


if __name__ == '__main__':
    cli()
